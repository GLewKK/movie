@model DAL.Models.Request
@{
    ViewBag.Title = "Home Page";
}
<link href="~/Content/NotValid.css" rel="stylesheet" />
<br />
<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default" id="forms">
            <div class="panel-heading">
                <h4>@Html.DisplayFor(x => x.User.UserName) Request</h4>
                <h4 id="statuswait">Waiting for respond:</h4>
            </div>
            <div class="panel-body" data-status="@Model.Status.Name" id="statusData">
                <div class="col-lg-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Credit.DataExtra.FirstName, new { @class = "control-label" })
                        <div class="form-inline">
                            @Html.TextBoxFor(x => x.Credit.DataExtra.FirstName, new { @class = "form-control toedit", @readonly = "readonly", @id = "Firstname" })
                            <button class="buttonfalse btn btn-danger btn-circle pull-right hidden" value="buton"><span class="glyphicon glyphicon-remove"></span></button>
                        </div>
                    </div>

                    <div class="form-group ">
                        @Html.LabelFor(model => model.Credit.DataExtra.LastName, new { @class = "control-label" })
                        <div class="form-inline">
                            @Html.TextBoxFor(model => model.Credit.DataExtra.LastName, new { @class = "form-control toedit", @readonly = "readonly", @id = "Lastname" })
                            <button class="buttonfalse btn btn-danger btn-circle pull-right hidden" value="buton"><span class="glyphicon glyphicon-remove"></span></button>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Credit.DataExtra.Telephone, new { @class = "control-label" })
                        <div class="form-inline">
                            @Html.TextBoxFor(model => model.Credit.DataExtra.Telephone, new { @class = "form-control toedit", @readonly = "readonly", @id = "Telephone" })
                            <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                        </div>
                    </div>

                    <div class="form-group ">
                        @Html.LabelFor(model => model.Credit.DataExtra.IDNP, new { @class = "control-label" })
                        <div class="form-inline">
                            @Html.TextBoxFor(model => model.Credit.DataExtra.IDNP, new { @class = "form-control toedit has-error", @readonly = "readonly", @id = "IDNP" })
                            <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                        </div>
                    </div>
                    @* <div class="form-inline ">
                    @Html.DropDownListFor(model => model.Credit.DataExtra.PersonType, new SelectList(new[] { new { Value = "true", Text = "Physical Person" }, new { Value = "false", Text = "Juridical Person" } }, "Value", "Text", Model.Credit.DataExtra.PersonType), htmlAttributes: new { @class = "form-control toedit", @readonly = "readonly", @disabled = "disabled", @id = "Person_Type" })
                    <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                </div>*@
                    <div class="form-group">
                        <label class="control-label">Date of birth</label>
                        <div class="form-inline">
                            @Html.TextBoxFor(model => model.Credit.DataExtra.DateOfBirth, new { @class = "form-control toedit", @readonly = "readonly", @id = "DateOfBirth", @data_extra = @Model.Credit.DataExtra.DateOfBirth })
                            <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Workspace</label>
                        <div class="form-inline">
                            @Html.TextBoxFor(model => model.Credit.DataExtra.WorkSpace, new { @class = "form-control toedit", @readonly = "readonly", @id = "WorkSpace", @data_extra = @Model.Credit.DataExtra.WorkSpace })
                            <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Workspace Phone Number</label>
                        <div class="form-inline">
                            @Html.TextBoxFor(model => model.Credit.DataExtra.TelephoneWorkSpace, new { @class = "form-control toedit", @readonly = "readonly", @id = "TelephoneWorkSpace", @data_extra = @Model.Credit.DataExtra.TelephoneWorkSpace })
                            <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                        </div>
                    </div>
                    @*<div class="form-group">
                    @Html.CheckBoxFor(model => model.Credit.DataExtra.IsMarried, new { @class = "form-control", @readonly = "readonly", @id = "IsMarried", @data_extra = @Model.Credit.DataExtra.IsMarried })
                </div>*@

                    @if (Model.Credit.DataExtra.IsMarried == true)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Credit.DataExtra.IsMarried, new { @class = "control-label" })
                            <div class="form-inline">
                                @Html.TextBox("Married", "Married", new { @class = "form-control toedit", @readonly = "readonly", @id = "IsMarried", @data_extra = @Model.Credit.DataExtra.IsMarried })
                                <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Work Space (husband/wife)</label>
                            <div class="form-inline">
                                @Html.TextBoxFor(model => model.Credit.DataExtra.WorkSpaceHusbandWife, new { @class = "form-control toedit", @readonly = "readonly", @id = "WorkSpaceHusbandWife", @data_extra = @Model.Credit.DataExtra.WorkSpaceHusbandWife })
                                <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Official Venit (husband/wife)</label>
                            <div class="form-inline">
                                @Html.TextBoxFor(model => model.Credit.DataExtra.OfficialVenitHusbandWife, new { @class = "form-control toedit", @readonly = "readonly", @id = "OfficialVenitHusbandWife", @data_extra = @Model.Credit.DataExtra.OfficialVenitHusbandWife })
                                <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            <label class="control-label">Marital Status</label>
                            <div class="form-inline">
                                @Html.TextBox("Not Married", "Not Married", new { @class = "form-control toedit", @readonly = "readonly", @id = "IsMarried", @data_extra = @Model.Credit.DataExtra.IsMarried })
                                <button class="buttonfalse btn btn-danger btn-circle pull-right hidden"><span class="glyphicon glyphicon-remove"></span></button>
                            </div>
                        </div>
                    }
                </div>


            </div>
        </div>
            <div class="panel-footer">
                <button data-request-id="@Model.Id" type="submit" class="form-control btn btn-success disabled" style="width: 100px" id="buttonsubmit"><span class ="submited">Submit</span></button>  |
                @Html.ActionLink("Return to Requests", "Tasks", "Home", htmlAttributes: new { @class=" form-control btn btn-primary ", @style="width:150px"}) |
              
            </div>

            </div>
            

        </div>
    </div>



<script src="~/Scripts/jquery-3.3.1.js"></script>
<script>

    $(document).ready(function () {
        if ($("#statusData").attr("data-status") == "pending for validation") {
            $(".btn").removeClass("hidden");
            $("#buttonsubmit").removeClass("disabled");
            $("#statuswait").addClass("hidden");
        }

        $("#forms .buttonfalse").on("click",
            function () {
                $(this).parent('div:first').children('.toedit').toggleClass("notvalid");
                if ($(".toedit").hasClass("notvalid")) {
                    $("#buttonsubmit").children("span").text("Reject");
                    $("#buttonsubmit").children("span").addClass("rejected");
                    $("#buttonsubmit").removeClass("btn-success");
                    $("#buttonsubmit").addClass("btn-danger");

                } else {
                    $("#buttonsubmit").children("span").text("Submit");
                    $("#buttonsubmit").children("span").addClass("submited");
                    $("#buttonsubmit").removeClass("btn-danger");
                    $("#buttonsubmit").addClass("btn-success");
                }

            });

        $("#buttonsubmit").on("click",
            function () {
                if ($("#statusData").attr("data-status") == "pending for validation") {
                    var requestId = $("#buttonsubmit").attr("data-request-id");
                    if ($("#buttonsubmit").children("span").hasClass("rejected")) {
                        debugger;
                        var isNotValid = $('.toedit').hasClass("notvalid");
                        var notValidValue = $('.toedit').filter('.notvalid');
                        var list = [];
                            if (isNotValid) {
                                $.each(notValidValue,
                                    function () {
                                        list.push(this.id);
                                    });
                                list.toString();
                                $.ajax({
                                    url: '@Url.Action("SetStatus", "User")',
                                    method: "POST",
                                    data: { list: list, id: requestId, status: "rejected" },
                                    success: function (result) {
                                        alert(result);
                                        location.reload();
                                    }
                                });
                            } else {
                                alert("is valid");
                            }
                        
                    } else {
                        debugger;
                            $.ajax({
                                url: '@Url.Action("SetStatus", "User")',
                                method: "POST",
                                data: { list: list, id: requestId, status: "pending for approval" },
                                success: function (result) {
                                    alert(result);
                                    location.reload();
                                }
                            });
                        

                    }
                }
            });
    });
    function updateStatus() {

        var requestId = $("#buttonsubmit").attr("data-request-id");
        $.ajax({
            method: "post",
            url: '@Url.Action("GetCurrentStatus", "User")',
            data: { requestId: requestId },
            success: function(result) {
                if (result != $("#statusData").attr("data-status")) {
                    $("#statusData").attr("data-status", result);
                    if (result == "cancelled") {
                        alert("The request has been canceled");
                        location.reload();
                    }
                        location.reload();
                }
            }
        });
    }
    $(document).ready(function () {
        setInterval('updateStatus()', 1000);

    });
</script>